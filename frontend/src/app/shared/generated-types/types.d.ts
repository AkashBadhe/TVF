/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/api": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["AppController_getHello"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/health": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["AppController_getHealth"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/auth/register": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Register a new customer */
        post: operations["AuthController_register"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/auth/login": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Customer login */
        post: operations["AuthController_login"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/auth/admin/login": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Admin login */
        post: operations["AuthController_adminLogin"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/auth/profile": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get current user profile */
        get: operations["AuthController_getProfile"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/auth/refresh": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Refresh JWT token */
        post: operations["AuthController_refreshToken"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/auth/change-password": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /** Change customer password */
        patch: operations["AuthController_changePassword"];
        trace?: never;
    };
    "/api/auth/logout": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Logout (client-side token invalidation) */
        post: operations["AuthController_logout"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/auth/admin/customers": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get all customers (Admin only) */
        get: operations["AuthController_getAllCustomers"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/menu/categories": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get all categories with item counts */
        get: operations["MenuController_getCategories"];
        put?: never;
        /** Create a new category (Admin only) */
        post: operations["MenuController_createCategory"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/menu/categories/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get category by ID */
        get: operations["MenuController_getCategoryById"];
        put?: never;
        post?: never;
        /** Delete category (Admin only) */
        delete: operations["MenuController_deleteCategory"];
        options?: never;
        head?: never;
        /** Update category (Admin only) */
        patch: operations["MenuController_updateCategory"];
        trace?: never;
    };
    "/api/menu": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get all menu items with filters and pagination */
        get: operations["MenuController_getMenuItems"];
        put?: never;
        /** Create a new menu item (Admin only) */
        post: operations["MenuController_createMenuItem"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/menu/bulk": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Create multiple menu items at once (Admin only) */
        post: operations["MenuController_createMultipleMenuItems"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/menu/search": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Search menu items */
        get: operations["MenuController_searchMenuItems"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/menu/featured": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get featured menu items */
        get: operations["MenuController_getFeaturedItems"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/menu/category/{categoryId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get menu items by category */
        get: operations["MenuController_getMenuItemsByCategory"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/menu/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get menu item by ID */
        get: operations["MenuController_getMenuItemById"];
        put?: never;
        post?: never;
        /** Delete menu item (Admin only) */
        delete: operations["MenuController_deleteMenuItem"];
        options?: never;
        head?: never;
        /** Update menu item (Admin only) */
        patch: operations["MenuController_updateMenuItem"];
        trace?: never;
    };
    "/api/menu/{id}/toggle-availability": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /** Toggle menu item availability (Admin only) */
        patch: operations["MenuController_toggleAvailability"];
        trace?: never;
    };
    "/api/cart": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get current customer cart */
        get: operations["CartController_getCart"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/cart/add": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Add item to cart */
        post: operations["CartController_addToCart"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/cart/items/{itemIndex}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /** Remove item from cart */
        delete: operations["CartController_removeFromCart"];
        options?: never;
        head?: never;
        /** Update cart item quantity and instructions */
        patch: operations["CartController_updateCartItem"];
        trace?: never;
    };
    "/api/cart/clear": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /** Clear all items from cart */
        delete: operations["CartController_clearCart"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/cart/validate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Validate cart for checkout */
        get: operations["CartController_validateCart"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/cart/admin/all": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get all active carts (Admin only) */
        get: operations["CartController_getAllCarts"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/cart/admin/stats": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get cart statistics (Admin only) */
        get: operations["CartController_getCartStats"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/orders": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Place a new order from cart */
        post: operations["OrdersController_placeOrder"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/orders/my-orders": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get customer orders */
        get: operations["OrdersController_getMyOrders"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/orders/admin/all": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get all orders (admin only) */
        get: operations["OrdersController_getAllOrders"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/orders/admin/stats": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get order statistics (admin only) */
        get: operations["OrdersController_getOrderStats"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/orders/track/{orderNumber}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Track order by order number */
        get: operations["OrdersController_trackOrder"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/orders/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get order by ID */
        get: operations["OrdersController_getOrderById"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/orders/{id}/status": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /** Update order status (admin only) */
        patch: operations["OrdersController_updateOrderStatus"];
        trace?: never;
    };
    "/api/orders/{id}/cancel": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /** Cancel order */
        delete: operations["OrdersController_cancelOrder"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/orders/admin/{id}/cancel": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /** Cancel order (admin) */
        patch: operations["OrdersController_adminCancelOrder"];
        trace?: never;
    };
    "/api/restaurant": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get restaurant information (public) */
        get: operations["RestaurantController_getPublicInfo"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/restaurant/contact": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get restaurant contact information */
        get: operations["RestaurantController_getContactInfo"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/restaurant/delivery-info": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get delivery information */
        get: operations["RestaurantController_getDeliveryInfo"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/restaurant/admin/full": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get complete restaurant information (admin only) */
        get: operations["RestaurantController_getFullInfo"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/restaurant/admin/settings": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get restaurant settings (admin only) */
        get: operations["RestaurantController_getSettings"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/restaurant/admin/initialize": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Initialize restaurant information with defaults (admin only) */
        post: operations["RestaurantController_initialize"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/restaurant/admin/create": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Create restaurant information (admin only) */
        post: operations["RestaurantController_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/restaurant/admin/update": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Update restaurant information (admin only) */
        put: operations["RestaurantController_update"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/restaurant/admin/status": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /** Update restaurant open/closed status (admin only) */
        patch: operations["RestaurantController_updateStatus"];
        trace?: never;
    };
    "/api/restaurant/admin/hours": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /** Update restaurant business hours (admin only) */
        patch: operations["RestaurantController_updateBusinessHours"];
        trace?: never;
    };
    "/api/restaurant/admin/delivery-settings": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /** Update delivery settings (admin only) */
        patch: operations["RestaurantController_updateDeliverySettings"];
        trace?: never;
    };
    "/api/upload/menu-item/{id}/image": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Upload single image for menu item (admin only) */
        post: operations["UploadController_uploadMenuItemImage"];
        /** Delete menu item image (admin only) */
        delete: operations["UploadController_deleteMenuItemImage"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/upload/menu-item/{id}/images": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Upload multiple images for menu item (admin only) */
        post: operations["UploadController_uploadMenuItemImages"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/upload/category/{id}/image": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Upload image for category (admin only) */
        post: operations["UploadController_uploadCategoryImage"];
        /** Delete category image (admin only) */
        delete: operations["UploadController_deleteCategoryImage"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/upload/restaurant/logo": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Upload restaurant logo (admin only) */
        post: operations["UploadController_uploadRestaurantLogo"];
        /** Delete restaurant logo (admin only) */
        delete: operations["UploadController_deleteRestaurantLogo"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/upload/restaurant/images": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Upload restaurant images (admin only) */
        post: operations["UploadController_uploadRestaurantImages"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/upload/restaurant/image": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /** Delete restaurant image (admin only) */
        delete: operations["UploadController_deleteRestaurantImage"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/upload/info/{type}/{filename}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get file information */
        get: operations["UploadController_getFileInfo"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/uploads/{type}/{filename}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Serve uploaded files */
        get: operations["StaticFilesController_serveFile"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        RegisterDto: {
            /**
             * @description Customer full name
             * @example John Doe
             */
            name: string;
            /**
             * @description Customer email address
             * @example john@example.com
             */
            email: string;
            /**
             * @description Customer phone number
             * @example +1234567890
             */
            phone: string;
            /**
             * @description Customer password (min 8 chars, must contain uppercase, lowercase, number)
             * @example SecurePass123
             */
            password: string;
            /**
             * @description Customer address (optional)
             * @example 123 Main St, City, State 12345
             */
            address?: string;
        };
        LoginDto: {
            /**
             * @description Customer email address
             * @example john@example.com
             */
            email: string;
            /**
             * @description Customer password
             * @example SecurePass123
             */
            password: string;
        };
        ChangePasswordDto: {
            /** @description Current password */
            currentPassword: string;
            /**
             * @description New password (min 8 chars, must contain uppercase, lowercase, number)
             * @example NewSecurePass123
             */
            newPassword: string;
        };
        CreateCategoryDto: {
            /** @description Category name */
            name: string;
            /** @description Category description */
            description?: string;
            /**
             * @description Sort order for display
             * @default 0
             */
            sortOrder: number;
            /**
             * @description Whether category is active
             * @default true
             */
            isActive: boolean;
            /** @description Category image URL */
            image?: string;
        };
        UpdateCategoryDto: {
            /** @description Category name */
            name?: string;
            /** @description Category description */
            description?: string;
            /**
             * @description Sort order for display
             * @default 0
             */
            sortOrder: number;
            /**
             * @description Whether category is active
             * @default true
             */
            isActive: boolean;
            /** @description Category image URL */
            image?: string;
        };
        NutritionalInfoDto: {
            /** @description Calories per serving */
            calories?: number;
            /** @description Protein in grams */
            protein?: number;
            /** @description Carbohydrates in grams */
            carbohydrates?: number;
            /** @description Fat in grams */
            fat?: number;
            /** @description Fiber in grams */
            fiber?: number;
            /** @description Sodium in milligrams */
            sodium?: number;
        };
        CreateMenuItemDto: {
            /** @description Menu item name */
            name: string;
            /** @description Menu item description */
            description: string;
            /** @description Price in currency units */
            price: number;
            /** @description Category ID */
            categoryId: string;
            /** @description Array of image URLs */
            images?: string[];
            /**
             * @description Is vegetarian
             * @default false
             */
            isVegetarian: boolean;
            /**
             * @description Is vegan
             * @default false
             */
            isVegan: boolean;
            /**
             * @description Is gluten free
             * @default false
             */
            isGlutenFree: boolean;
            /**
             * @description Is spicy
             * @default false
             */
            isSpicy: boolean;
            /** @description List of allergens */
            allergens?: string[];
            /** @description List of ingredients */
            ingredients?: string[];
            /**
             * @description Is available for order
             * @default true
             */
            isAvailable: boolean;
            /**
             * @description Preparation time in minutes
             * @default 15
             */
            preparationTime: number;
            /** @description Nutritional information */
            nutritionalInfo?: components["schemas"]["NutritionalInfoDto"];
        };
        CreateMultipleMenuItemsDto: {
            /** @description Array of menu items to create */
            items: components["schemas"]["CreateMenuItemDto"][];
        };
        UpdateMenuItemDto: {
            /** @description Menu item name */
            name?: string;
            /** @description Menu item description */
            description?: string;
            /** @description Price in currency units */
            price?: number;
            /** @description Category ID */
            categoryId?: string;
            /** @description Array of image URLs */
            images?: string[];
            /**
             * @description Is vegetarian
             * @default false
             */
            isVegetarian: boolean;
            /**
             * @description Is vegan
             * @default false
             */
            isVegan: boolean;
            /**
             * @description Is gluten free
             * @default false
             */
            isGlutenFree: boolean;
            /**
             * @description Is spicy
             * @default false
             */
            isSpicy: boolean;
            /** @description List of allergens */
            allergens?: string[];
            /** @description List of ingredients */
            ingredients?: string[];
            /**
             * @description Is available for order
             * @default true
             */
            isAvailable: boolean;
            /**
             * @description Preparation time in minutes
             * @default 15
             */
            preparationTime: number;
            /** @description Nutritional information */
            nutritionalInfo?: components["schemas"]["NutritionalInfoDto"];
        };
        AddToCartDto: {
            /** @description Menu item ID to add to cart */
            menuItemId: string;
            /**
             * @description Quantity of the item
             * @default 1
             */
            quantity: number;
            /** @description Special instructions for the item */
            specialInstructions?: string;
        };
        UpdateCartItemDto: {
            /** @description New quantity for the item */
            quantity: number;
            /** @description Updated special instructions for the item */
            specialInstructions?: string;
        };
        CustomerInfoDto: {
            /** @description Customer name */
            name: string;
            /** @description Customer phone number */
            phone: string;
            /** @description Customer email */
            email: string;
        };
        DeliveryAddressDto: {
            /** @description Street address */
            street: string;
            /** @description City */
            city: string;
            /** @description ZIP code */
            zipCode: string;
            /** @description Delivery instructions */
            instructions?: string;
        };
        CreateOrderDto: {
            /** @description Customer information */
            customerInfo: components["schemas"]["CustomerInfoDto"];
            /**
             * @description Order type (pickup or delivery)
             * @enum {string}
             */
            orderType: "pickup" | "delivery";
            /**
             * @description Payment method
             * @enum {string}
             */
            paymentMethod: "cash" | "card" | "online";
            /** @description Delivery address (required for delivery orders) */
            deliveryAddress?: components["schemas"]["DeliveryAddressDto"];
            /** @description Special instructions for the order */
            specialInstructions?: string;
            /** @description Estimated delivery time */
            estimatedDeliveryTime?: string;
        };
        UpdateOrderStatusDto: {
            /**
             * @description New order status
             * @enum {string}
             */
            status: "pending" | "confirmed" | "preparing" | "ready" | "out_for_delivery" | "delivered" | "cancelled";
            /** @description Actual delivery time (for delivered status) */
            actualDeliveryTime?: string;
            /** @description Estimated delivery time update */
            estimatedDeliveryTime?: string;
        };
        AddressDto: {
            /** @description Street address */
            street: string;
            /** @description City */
            city: string;
            /** @description ZIP code */
            zipCode: string;
            /**
             * @description Country
             * @default USA
             */
            country: string;
        };
        BusinessHoursDto: {
            /** @description Opening time (HH:MM format) */
            open: string;
            /** @description Closing time (HH:MM format) */
            close: string;
            /**
             * @description Whether the restaurant is open this day
             * @default true
             */
            isOpen: boolean;
        };
        WeeklyHoursDto: {
            monday: components["schemas"]["BusinessHoursDto"];
            tuesday: components["schemas"]["BusinessHoursDto"];
            wednesday: components["schemas"]["BusinessHoursDto"];
            thursday: components["schemas"]["BusinessHoursDto"];
            friday: components["schemas"]["BusinessHoursDto"];
            saturday: components["schemas"]["BusinessHoursDto"];
            sunday: components["schemas"]["BusinessHoursDto"];
        };
        CreateRestaurantDto: {
            /** @description Restaurant name */
            name: string;
            /** @description Restaurant description */
            description?: string;
            /** @description Restaurant address */
            address: components["schemas"]["AddressDto"];
            /** @description Phone number */
            phone: string;
            /** @description Email address */
            email: string;
            /** @description Business hours */
            hours?: components["schemas"]["WeeklyHoursDto"];
            /**
             * @description Delivery fee
             * @default 3.99
             */
            deliveryFee: number;
            /**
             * @description Minimum order amount
             * @default 15
             */
            minimumOrder: number;
            /**
             * @description Tax rate (decimal)
             * @default 0.1
             */
            taxRate: number;
            /**
             * @description Whether restaurant is currently open
             * @default true
             */
            isOpen: boolean;
            /** @description Logo URL */
            logo?: string;
            /** @description Restaurant images */
            images?: string[];
            /** @description Cuisine types */
            cuisineTypes?: string[];
        };
        UpdateRestaurantDto: {
            /** @description Restaurant name */
            name?: string;
            /** @description Restaurant description */
            description?: string;
            /** @description Restaurant address */
            address?: components["schemas"]["AddressDto"];
            /** @description Phone number */
            phone?: string;
            /** @description Email address */
            email?: string;
            /** @description Business hours */
            hours?: components["schemas"]["WeeklyHoursDto"];
            /**
             * @description Delivery fee
             * @default 3.99
             */
            deliveryFee: number;
            /**
             * @description Minimum order amount
             * @default 15
             */
            minimumOrder: number;
            /**
             * @description Tax rate (decimal)
             * @default 0.1
             */
            taxRate: number;
            /**
             * @description Whether restaurant is currently open
             * @default true
             */
            isOpen: boolean;
            /** @description Logo URL */
            logo?: string;
            /** @description Restaurant images */
            images?: string[];
            /** @description Cuisine types */
            cuisineTypes?: string[];
        };
        RestaurantStatusDto: {
            /**
             * @description Whether restaurant is open for orders
             * @default true
             */
            isOpen: boolean;
        };
        FileUploadResponseDto: {
            /** @description Upload success status */
            success: boolean;
            /** @description File URL */
            url: string;
            /** @description Original filename */
            originalName: string;
            /** @description Stored filename */
            filename: string;
            /** @description File size in bytes */
            size: number;
            /** @description MIME type */
            mimetype: string;
            /** @description Upload message */
            message: string;
        };
        MultipleFileUploadResponseDto: {
            /** @description Upload success status */
            success: boolean;
            /** @description Uploaded files information */
            files: components["schemas"]["FileUploadResponseDto"][];
            /** @description Upload message */
            message: string;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    AppController_getHello: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    AppController_getHealth: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    AuthController_register: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["RegisterDto"];
            };
        };
        responses: {
            /** @description Customer registered successfully */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Customer with this email already exists */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    AuthController_login: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["LoginDto"];
            };
        };
        responses: {
            /** @description Login successful */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Invalid credentials */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    AuthController_adminLogin: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["LoginDto"];
            };
        };
        responses: {
            /** @description Admin login successful */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Invalid admin credentials */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    AuthController_getProfile: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Profile retrieved successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    AuthController_refreshToken: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Token refreshed successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    AuthController_changePassword: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ChangePasswordDto"];
            };
        };
        responses: {
            /** @description Password changed successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Current password is incorrect */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    AuthController_logout: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Logout successful */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    AuthController_getAllCustomers: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Customers retrieved successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    MenuController_getCategories: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Returns all active categories with item counts */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    MenuController_createCategory: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateCategoryDto"];
            };
        };
        responses: {
            /** @description Category created successfully */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    MenuController_getCategoryById: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Category ID */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Returns category details */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Category not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    MenuController_deleteCategory: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Category ID */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Category deleted successfully */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    MenuController_updateCategory: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Category ID */
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateCategoryDto"];
            };
        };
        responses: {
            /** @description Category updated successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    MenuController_getMenuItems: {
        parameters: {
            query?: {
                /** @description Search term */
                search?: string;
                /** @description Filter by category */
                categoryId?: string;
                /** @description Filter vegetarian items only */
                isVegetarian?: boolean;
                /** @description Filter vegan items only */
                isVegan?: boolean;
                /** @description Filter gluten-free items only */
                isGlutenFree?: boolean;
                /** @description Filter spicy items only */
                isSpicy?: boolean;
                /** @description Minimum price filter */
                minPrice?: number;
                /** @description Maximum price filter */
                maxPrice?: number;
                /** @description Sort by field */
                sortBy?: "name" | "price" | "rating" | "preparationTime";
                /** @description Sort order */
                sortOrder?: "asc" | "desc";
                /** @description Page number for pagination */
                page?: number;
                /** @description Items per page */
                limit?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Returns paginated menu items with filters applied */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    MenuController_createMenuItem: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateMenuItemDto"];
            };
        };
        responses: {
            /** @description Menu item created successfully */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    MenuController_createMultipleMenuItems: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateMultipleMenuItemsDto"];
            };
        };
        responses: {
            /** @description Menu items created successfully */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        success?: boolean;
                        data?: {
                            created?: number;
                            failed?: number;
                            items?: unknown[];
                            errors?: unknown[];
                        };
                    };
                };
            };
        };
    };
    MenuController_searchMenuItems: {
        parameters: {
            query: {
                /** @description Search query */
                q: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Returns search results */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    MenuController_getFeaturedItems: {
        parameters: {
            query?: {
                /** @description Number of items to return */
                limit?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Returns featured items */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    MenuController_getMenuItemsByCategory: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Category ID */
                categoryId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Returns menu items in category */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    MenuController_getMenuItemById: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Menu item ID */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Returns menu item details */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Menu item not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    MenuController_deleteMenuItem: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Menu item ID */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Menu item deleted successfully */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    MenuController_updateMenuItem: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Menu item ID */
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateMenuItemDto"];
            };
        };
        responses: {
            /** @description Menu item updated successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    MenuController_toggleAvailability: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Menu item ID */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Availability toggled successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    CartController_getCart: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Returns customer cart with items */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    CartController_addToCart: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["AddToCartDto"];
            };
        };
        responses: {
            /** @description Item added to cart successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Menu item not available or invalid quantity */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    CartController_removeFromCart: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Index of the item in cart (0-based) */
                itemIndex: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Item removed from cart successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Invalid item index */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    CartController_updateCartItem: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Index of the item in cart (0-based) */
                itemIndex: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateCartItemDto"];
            };
        };
        responses: {
            /** @description Cart item updated successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Invalid item index or quantity */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    CartController_clearCart: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Cart cleared successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    CartController_validateCart: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Cart validation result */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    CartController_getAllCarts: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Returns all active carts */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    CartController_getCartStats: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Returns cart statistics */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    OrdersController_placeOrder: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateOrderDto"];
            };
        };
        responses: {
            /** @description Order placed successfully */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        success?: boolean;
                        data?: Record<string, never>;
                        message?: string;
                    };
                };
            };
            /** @description Bad request - cart empty or validation error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    OrdersController_getMyOrders: {
        parameters: {
            query?: {
                /** @description Filter by order status */
                status?: "pending" | "confirmed" | "preparing" | "ready" | "out_for_delivery" | "delivered" | "cancelled";
                /** @description Filter by order type */
                orderType?: "pickup" | "delivery";
                /** @description Filter by payment method */
                paymentMethod?: "cash" | "card" | "online";
                /** @description Filter by customer email */
                customerEmail?: string;
                /** @description Filter by order number */
                orderNumber?: string;
                /** @description Filter orders from this date (ISO string) */
                dateFrom?: string;
                /** @description Filter orders to this date (ISO string) */
                dateTo?: string;
                /** @description Page number for pagination */
                page?: number;
                /** @description Number of items per page */
                limit?: number;
                /** @description Sort field */
                sortBy?: string;
                /** @description Sort order (asc or desc) */
                sortOrder?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Customer orders retrieved successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        success?: boolean;
                        data?: {
                            orders?: Record<string, never>[];
                            pagination?: Record<string, never>;
                        };
                    };
                };
            };
        };
    };
    OrdersController_getAllOrders: {
        parameters: {
            query?: {
                /** @description Filter by order status */
                status?: "pending" | "confirmed" | "preparing" | "ready" | "out_for_delivery" | "delivered" | "cancelled";
                /** @description Filter by order type */
                orderType?: "pickup" | "delivery";
                /** @description Filter by payment method */
                paymentMethod?: "cash" | "card" | "online";
                /** @description Filter by customer email */
                customerEmail?: string;
                /** @description Filter by order number */
                orderNumber?: string;
                /** @description Filter orders from this date (ISO string) */
                dateFrom?: string;
                /** @description Filter orders to this date (ISO string) */
                dateTo?: string;
                /** @description Page number for pagination */
                page?: number;
                /** @description Number of items per page */
                limit?: number;
                /** @description Sort field */
                sortBy?: string;
                /** @description Sort order (asc or desc) */
                sortOrder?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description All orders retrieved successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        success?: boolean;
                        data?: {
                            orders?: Record<string, never>[];
                            pagination?: Record<string, never>;
                        };
                    };
                };
            };
            /** @description Forbidden - admin access required */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    OrdersController_getOrderStats: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Order statistics retrieved successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        success?: boolean;
                        data?: {
                            totalOrders?: number;
                            pendingOrders?: number;
                            completedOrders?: number;
                            cancelledOrders?: number;
                            todayOrders?: number;
                            revenueToday?: number;
                            revenueTotal?: number;
                        };
                    };
                };
            };
            /** @description Forbidden - admin access required */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    OrdersController_trackOrder: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                orderNumber: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Order found and returned */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        success?: boolean;
                        data?: Record<string, never>;
                    };
                };
            };
            /** @description Order not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    OrdersController_getOrderById: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Order found and returned */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        success?: boolean;
                        data?: Record<string, never>;
                    };
                };
            };
            /** @description Order not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    OrdersController_updateOrderStatus: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateOrderStatusDto"];
            };
        };
        responses: {
            /** @description Order status updated successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        success?: boolean;
                        data?: Record<string, never>;
                        message?: string;
                    };
                };
            };
            /** @description Bad request - invalid status transition */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden - admin access required */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Order not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    OrdersController_cancelOrder: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Order cancelled successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        success?: boolean;
                        data?: Record<string, never>;
                        message?: string;
                    };
                };
            };
            /** @description Bad request - order cannot be cancelled */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Order not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    OrdersController_adminCancelOrder: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Order cancelled successfully by admin */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        success?: boolean;
                        data?: Record<string, never>;
                        message?: string;
                    };
                };
            };
            /** @description Bad request - order cannot be cancelled */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden - admin access required */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Order not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    RestaurantController_getPublicInfo: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Restaurant information retrieved successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        success?: boolean;
                        data?: {
                            name?: string;
                            description?: string;
                            address?: Record<string, never>;
                            phone?: string;
                            email?: string;
                            hours?: Record<string, never>;
                            isOpen?: boolean;
                            currentStatus?: Record<string, never>;
                        };
                    };
                };
            };
            /** @description Restaurant information not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    RestaurantController_getContactInfo: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Contact information retrieved successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        success?: boolean;
                        data?: {
                            name?: string;
                            phone?: string;
                            email?: string;
                            address?: Record<string, never>;
                        };
                    };
                };
            };
        };
    };
    RestaurantController_getDeliveryInfo: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Delivery information retrieved successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        success?: boolean;
                        data?: {
                            deliveryFee?: number;
                            minimumOrder?: number;
                            estimatedDeliveryTime?: string;
                            deliveryRadius?: string;
                            address?: Record<string, never>;
                        };
                    };
                };
            };
        };
    };
    RestaurantController_getFullInfo: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Complete restaurant information retrieved successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        success?: boolean;
                        data?: Record<string, never>;
                    };
                };
            };
            /** @description Forbidden - admin access required */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Restaurant information not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    RestaurantController_getSettings: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Restaurant settings retrieved successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        success?: boolean;
                        data?: {
                            deliveryFee?: number;
                            minimumOrder?: number;
                            taxRate?: number;
                            isOpen?: boolean;
                            hours?: Record<string, never>;
                        };
                    };
                };
            };
            /** @description Forbidden - admin access required */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    RestaurantController_initialize: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Restaurant information initialized successfully */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        success?: boolean;
                        data?: Record<string, never>;
                        message?: string;
                    };
                };
            };
            /** @description Forbidden - admin access required */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    RestaurantController_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateRestaurantDto"];
            };
        };
        responses: {
            /** @description Restaurant information created successfully */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        success?: boolean;
                        data?: Record<string, never>;
                        message?: string;
                    };
                };
            };
            /** @description Bad request - validation error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden - admin access required */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Conflict - restaurant information already exists */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    RestaurantController_update: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateRestaurantDto"];
            };
        };
        responses: {
            /** @description Restaurant information updated successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        success?: boolean;
                        data?: Record<string, never>;
                        message?: string;
                    };
                };
            };
            /** @description Bad request - validation error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden - admin access required */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Restaurant information not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    RestaurantController_updateStatus: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["RestaurantStatusDto"];
            };
        };
        responses: {
            /** @description Restaurant status updated successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        success?: boolean;
                        data?: Record<string, never>;
                        message?: string;
                    };
                };
            };
            /** @description Forbidden - admin access required */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Restaurant information not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    RestaurantController_updateBusinessHours: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["WeeklyHoursDto"];
            };
        };
        responses: {
            /** @description Business hours updated successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        success?: boolean;
                        data?: Record<string, never>;
                        message?: string;
                    };
                };
            };
            /** @description Bad request - validation error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden - admin access required */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Restaurant information not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    RestaurantController_updateDeliverySettings: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Delivery settings updated successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        success?: boolean;
                        data?: Record<string, never>;
                        message?: string;
                    };
                };
            };
            /** @description Bad request - validation error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden - admin access required */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Restaurant information not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    UploadController_uploadMenuItemImage: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Menu item ID */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Image uploaded successfully */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["FileUploadResponseDto"];
                };
            };
            /** @description Bad request - invalid file or menu item not found */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden - admin access required */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    UploadController_deleteMenuItemImage: {
        parameters: {
            query: {
                /** @description Image URL to delete */
                imageUrl: string;
            };
            header?: never;
            path: {
                /** @description Menu item ID */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Image deleted successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden - admin access required */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Menu item or image not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    UploadController_uploadMenuItemImages: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Menu item ID */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Images uploaded successfully */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MultipleFileUploadResponseDto"];
                };
            };
            /** @description Bad request - invalid files or menu item not found */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden - admin access required */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    UploadController_uploadCategoryImage: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Category ID */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Category image uploaded successfully */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["FileUploadResponseDto"];
                };
            };
            /** @description Bad request - invalid file or category not found */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden - admin access required */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    UploadController_deleteCategoryImage: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Category ID */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Image deleted successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden - admin access required */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Category not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    UploadController_uploadRestaurantLogo: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Restaurant logo uploaded successfully */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["FileUploadResponseDto"];
                };
            };
            /** @description Bad request - invalid file */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden - admin access required */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    UploadController_deleteRestaurantLogo: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Logo deleted successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden - admin access required */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Restaurant not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    UploadController_uploadRestaurantImages: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Restaurant images uploaded successfully */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MultipleFileUploadResponseDto"];
                };
            };
            /** @description Bad request - invalid files */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden - admin access required */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    UploadController_deleteRestaurantImage: {
        parameters: {
            query: {
                /** @description Image URL to delete */
                imageUrl: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Image deleted successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden - admin access required */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Restaurant or image not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    UploadController_getFileInfo: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Upload type (menu, restaurant, categories) */
                type: string;
                /** @description File name */
                filename: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description File information retrieved successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description File not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    StaticFilesController_serveFile: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Upload type (menu, restaurant, categories) */
                type: string;
                /** @description File name */
                filename: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description File served successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description File not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
}
